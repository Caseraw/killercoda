---
apiVersion: v1
kind: Namespace
metadata:
  name: color-race-game
  labels:
    kubernetes.io/metadata.name: color-race-game
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bgcolor
  namespace: color-race-game
data:
  bgcolor.js: |
    var bgColor = "white"; // Set your desired default color here
    document.body.style.backgroundColor = bgColor;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: page
  namespace: color-race-game
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Color Race Game!</title>
        <!-- Bootstrap CSS -->
        <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
        <!-- Google Fonts -->
        <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@700&family=Roboto+Slab:wght@500&display=swap" rel="stylesheet">
    </head>
    <body>
      <div class="container text-center mt-5">
        <h1>Color Race Game!</h1>
        <div class="mt-4" style="font-size: 18px; font-family: 'Roboto Slab', serif;">Set the background color before it's too late!</div>
        <div class="mt-4" style="font-size: 32px; font-family: 'Roboto Slab', serif;">ðŸ˜¨âŒ›</div>
        <div id="timer" style="font-size: 96px; font-family: 'Raleway', sans-serif;">--</div>
        <div id="message" class="mt-4" style="font-size: 24px; font-family: 'Roboto Slab', serif;"></div>
        <div class="btn-group mt-3">
            <button id="stopGameButton" onclick="stopGame()" class="btn btn-warning">Stop Game</button>
            <button id="clearRestartButton" onclick="resetGame()" class="btn btn-danger">Clear & Restart</button>
        </div>
      </div>
      <!-- Game timer -->
      <script src="/js/bgcolor.js"></script>
      <script src="/js/game-logic.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-logic
  namespace: color-race-game
data:
  game-logic.js: |
    let counter = parseInt(localStorage.getItem('timer'), 10);
    let attempts = parseInt(localStorage.getItem('attempts'), 10);
    let storedMessage = localStorage.getItem('gameMessage');
    let chosenColor = localStorage.getItem('chosenColor');
    let interval;
    let reloadCheck = localStorage.getItem('reloadCheck');
    let gameStopped = false;

    const colors = ["red", "blue", "green", "yellow", "purple", "orange", "pink", "brown", "cyan", "lime"];

    const colorToRGB = {
        "red": "rgb(255, 0, 0)",
        "blue": "rgb(0, 0, 255)",
        "green": "rgb(0, 128, 0)",
        "yellow": "rgb(255, 255, 0)",
        "purple": "rgb(128, 0, 128)",
        "orange": "rgb(255, 165, 0)",
        "pink": "rgb(255, 192, 203)",
        "brown": "rgb(165, 42, 42)",
        "cyan": "rgb(0, 255, 255)",
        "lime": "rgb(50, 205, 50)"
    };

    if (!chosenColor) {
        chosenColor = colors[Math.floor(Math.random() * colors.length)];
        localStorage.setItem('chosenColor', chosenColor);
    }

    if (isNaN(counter) || isNaN(attempts)) {
        counter = 60;
        localStorage.setItem('timer', counter);
        attempts = 0;
        localStorage.setItem('attempts', attempts);
        storedMessage = "Change the background color to " + chosenColor + "!";
        localStorage.setItem('gameMessage', storedMessage);
    }

    const timerElement = document.getElementById('timer');
    const messageElement = document.getElementById('message');
    const resetButton = document.getElementById('resetButton');

    timerElement.textContent = counter;
    messageElement.textContent = storedMessage || "";

    function stopGame() {
        if (!gameStopped) {
            clearInterval(interval);  // Pause the timer
            gameStopped = true;
            document.getElementById('stopGameButton').textContent = "Resume Game";
        } else {
            // Resume the game
            interval = setInterval(updateTimer, 1000);
            gameStopped = false;
            document.getElementById('stopGameButton').textContent = "Stop Game";
        }
    }

    function resetGame() {
        // Clear all local storage values related to the game
        localStorage.removeItem('timer');
        localStorage.removeItem('attempts');
        localStorage.removeItem('gameMessage');
        localStorage.removeItem('chosenColor');
        localStorage.removeItem('reloadCheck');
        
        // Delay the page reload by 100 milliseconds to ensure local storage values are cleared
        setTimeout(() => {
            location.reload();
        }, 100);
    }

    function updateMessage(message) {
        messageElement.textContent = message;
        localStorage.setItem('gameMessage', message);
    }

    function checkBackgroundColor() {
        const currentColor = window.getComputedStyle(document.body).backgroundColor;

        // If we're performing a reload check
        if (reloadCheck) {
            if (currentColor === reloadCheck && currentColor === colorToRGB[chosenColor]) {
                clearInterval(interval);
                updateMessage("You win! ðŸ˜ŽðŸš€âœ¨");
            } else {
                clearInterval(interval);
                updateMessage("Busted! ðŸ˜± Cheating detected ðŸ‘®ðŸ˜­");
                localStorage.removeItem('reloadCheck'); // Clean up after verification
            }
        } else if (currentColor === colorToRGB[chosenColor]) {
            localStorage.setItem('reloadCheck', currentColor);  // Store the initial check
            location.reload();  // Trigger a reload
        }
    }

    if (attempts >= 3) {
        timerElement.textContent = '--';
        updateMessage("GAME OVER!");
        resetButton.style.display = 'block';
        resetButton.classList.remove('d-none');
    } else {
        function updateTimer() {
            if (!gameStopped) { // Only run timer updates if the game isn't stopped
                checkBackgroundColor();
                
                counter--;
                localStorage.setItem('timer', counter);
                timerElement.textContent = counter;

                if (counter <= 0) {
                    counter = 60;
                    localStorage.setItem('timer', counter);
                    attempts++;
                    localStorage.setItem('attempts', attempts);

                    switch (attempts) {
                        case 1:
                            updateMessage("First attempt FAILED! Try again, 2 attempts left! (Target color: " + chosenColor + ")");
                            break;
                        case 2:
                            updateMessage("Second attempt FAILED! Try again, 1 attempt left! (Target color: " + chosenColor + ")");
                            break;
                        case 3:
                            updateMessage("GAME OVER! ðŸ˜µðŸ˜¤ðŸ¤¬");
                            resetButton.style.display = 'block';
                            resetButton.classList.remove('d-none');
                            clearInterval(interval);
                            return;
                    }
                }
            }
        }

        interval = setInterval(updateTimer, 1000);
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: color-app
  namespace: color-race-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color-app
  template:
    metadata:
      labels:
        app: color-app
    spec:
      containers:
      - name: color-app
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: page
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        - name: bgcolor
          mountPath: /usr/share/nginx/html/js/bgcolor.js
          subPath: bgcolor.js
        - name: game-logic
          mountPath: /usr/share/nginx/html/js/game-logic.js
          subPath: game-logic.js
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "64Mi"
            cpu: "250m"
      volumes:
      - name: page
        configMap:
          name: page
      - name: bgcolor
        configMap:
          name: bgcolor
      - name: game-logic
        configMap:
          name: game-logic
---
apiVersion: v1
kind: Service
metadata:
  name: color-app-service
  namespace: color-race-game
spec:
  selector:
    app: color-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
